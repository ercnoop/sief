#+TITLE: Virtual Lisp Machine
#+AUTHOR: lambdart eirc.m
#+EMAIL: lambdart@protonmail.com eirc.m@protonmail.com
#+DESCRIPTION: an org-mode based Emacs configuration
#+KEYWORDS: emacs, org, liretate programming, config, init.el
#+LANGUAGE: en
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: showall

* Simplified VLM

  This is a cutomization I did over the inumerous refactoring that we
  need to reconfigure the whole system. Over the years, I changed from
  one Operational System to another in order to achieve the best usability
  for me. But since we also need to adapt to the commercial software due
  our capitalist needs, it's very hard to keep both worlds in sync.

  This is a simplified version of the VLM in order to start from scratch.
  It became easier for me start from zero instead of trying to adapt all
  other pieces of Elisp code or programs used by emacs once it became
  complex and full of features. For every new reconfiguration, a new set
  of configuration is created or updated, creating a whole new environment.

  This is the common start point for me.

* VLM

  Some people (including me) have started to refer to
  =Emacs= as a =LISP MACHINE=. It is not strictly a lisp machine
  because, clearly, it is a software program and not a physical
  computer, but as that line starts to blur it seems like a useful
  epithet for =Emacs=, because these days it looks more and more like
  an operating system.

  A =Lisp Machine= is a generic term. A Lisp Machine is a
  computer whose operating system and applications are
  written in Lisp.

  So, =VLM= stands for =Virtual Lisp Machine= and the prefix
  =vlm-= will appear often through this document.

  Literate programming is a programming paradigm introduced by Donald
  Knuth  in which a computer program is given an explanation of its
  logic in a natural language, such as English, interspersed with
  snippets of macros and traditional source code, from which
  compilable source code can be generated.

  =Org-mode= is used to write and organize the configuration
  in a literate programming format, meaning it contains
  Elisp source code blocks - that will be tangled generating the
  =init.el= final script - and the referent documentation.

  When you start Emacs, it normally attempts to load
  your =init.el file=, that will =load*= and =set= the
  proper values to the customizable library's variables.

** Bootstrap
*** Header

    Define the package header to avoid warnings, and just a
    reminder this file will be used as a seed to generate the
    final ~init.el~ script.

    #+BEGIN_SRC emacs-lisp

    ;;; init.el --- Virtual Lisp Machine Configuration (init.el)

    ;;; Commentary:

    ;; ... Present day, present time ....

    ;;; Code:

    #+END_SRC

*** Lexical

    Lexical binding opens up many more opportunities
    for optimization, so programs using it are likely to run
    faster in future Emacs versions.

    Lexical binding is also more compatible with concurrency,
    which was added to Emacs in version 26.1.

    #+BEGIN_SRC emacs-lisp

    ;;; -*- lexical-binding: t -*-

    #+END_SRC

*** Verify
**** Version

     Verify Emacs version.

     #+BEGIN_SRC emacs-lisp

     (when (version< emacs-version "26.3")
       (error "This requires Emacs 26.3 and above!"))

     #+END_SRC

*** Load-path

    When Emacs loads a Lisp library, it searches for the library in a list
    of directories specified by the variable 'load-path'. The value
    of this variable is a list of directories to search when
    loading files.

    If the environment variable =EMACSLOADPATH= is set, it modifies the
    above initialization procedure. Emacs initializes `load-path' based on
    the value of the environment variable.

    The syntax of =EMACSLOADPATH= is the same as used for 'PATH';
    directories are separated by ':' (or ';', on some operating systems).
    Here is an example of how to set =EMACSLOADPATH= variable (from a
    'sh'-style shell).

    #+BEGIN_SRC sh

    export EMACSLOADPATH=$EMACSLOADPATH:~/.emacs.d/lisp:~/.emacs.d/site-lisp

    #+END_SRC

    See ~defaults/default.xinitrc~ file for a detailed example.

    For each directory in `load-path', Emacs then checks to see if it
    contains a file `subdirs.el', and if so, loads it. The `subdirs.el'
    file is created when Emacs is built/installed, and contains code that
    causes Emacs to add any subdirectories of those directories to
    `load-path'. Both immediate subdirectories and subdirectories multiple
    levels down are added. But it excludes subdirectories whose names do
    not start with a letter or digit, and subdirectories named 'RCS' or
    'CVS', and subdirectories containing a file named =.nosearch=.

    See ~defaults/default.subdir.el~ file example.

*** Load-prefer

    In noninteractive sessions, prioritize non-byte-compiled source files to
    prevent the use of stale byte-code. Otherwise, it saves us a little IO time
    to skip the mtime checks on every *.elc file.

    #+BEGIN_SRC emacs-lisp

    (setq load-prefer-newer noninteractive)

    #+END_SRC

*** Loaddefs

    Loaddefs.el, automatically extracted autoloads!

    Just load the definitions using the =autoloads= facility
    (=loaddefs.el=), speeding up the process of initialization,
    that's why most of the =(require '<library>)= are commented
    through this configuration.

    The =autoload= facility lets you register the existence of a function or
    macro, but put off loading the file that defines it. The first call to
    the function automatically loads the proper library, in order to install
    the real definition and other associated code, then runs the real
    definition as if it had been loaded all along (lazy-load).

    Instead of installing a function by loading the file that contains it,
    or by evaluating the function definition, you can make the function
    available but not actually install it until it is first called.  This is
    called =autoloading=.

    When you execute an autoloaded function, Emacs automatically
    evaluates the file that contains the definition, and then calls the
    function.

    #+BEGIN_SRC emacs-lisp
      (require 'cl-seq)

      (defun vlm/generate-dir-loaddefs (dir &optional generate-full)
        "Generate loaddefs file for all directories inside of `user-emacs-directory/lisp'.
      If called interactively, regenerate all loaddefs."
        (let* ((dir (expand-file-name dir))
               (dir-name (car (reverse (string-split dir "/" 't))))
               (outputfile (format "%s/%s-loaddefs.el" dir dir-name)))
          (message (format "Generating loaddefs for %s into %s..." dir outputfile))
          (loaddefs-generate
           (cl-remove-if-not #'file-directory-p (directory-files-recursively dir "^[^.]" t))
           (expand-file-name outputfile dir) nil nil nil generate-full)
          (when generate-full
            (message "Fully generated new loaddefs file"))))

      (defun vlm/generate-loaddefs (dir &optional)
        (interactive "DDirectory:")
        (vlm/generate-dir-loaddefs dir))
    #+END_SRC

***** Require

      #+BEGIN_SRC emacs-lisp

      (require 'loaddefs)

      #+END_SRC

*** Add dirs to load path
**** Macros

    #+BEGIN_SRC emacs-lisp
      (defmacro safe-load-file (file)
        "Load FILE if exists."
        `(if (not (file-exists-p ,file))
             (message "File not found")
           (load (expand-file-name ,file) t nil nil)))

      (defmacro safe-add-dirs-to-load-path (dirs)
        "Add DIRS (directories) to `load-path'."
        `(dolist (dir ,dirs)
           (setq dir (expand-file-name dir))
           (when (file-directory-p dir)
             (unless (member dir load-path)
               (push dir load-path)))))

      (defmacro safe-funcall (func &rest args)
        "Call FUNC with ARGS, if it's bounded."
        `(when (fboundp ,func)
           (funcall ,func ,@args)))

      (defmacro safe-mkdir (dir)
        "Create DIR in the file system."
        `(when (and (not (file-exists-p ,dir))
                    (make-directory ,dir :parents))))
    #+END_SRC

**** Interactive Call

    #+BEGIN_SRC emacs-lisp

      (defun add-dir-to-load-path (dir)
        "Add dir to load-path interactively."
        (interactive "DDirectory:")
        (safe-add-dirs-to-load-path (list dir)))

    #+END_SRC

*** GC

    A big contributor to startup times is garbage collection. We up the gc
    threshold to temporarily prevent it from running, then reset it later by
    enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.

    Enforce a sneaky Garbage Collection strategy
    to minimize GC interference with the activity.

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; threshold inital value
     (setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

     #+END_SRC

*** Defines

    Your definitions as declare here. We have some
    =aliases=, =variables=, =keymaps= and =binds=.

**** Aliases

     Define some aliases to improve quality of life.

     #+BEGIN_SRC emacs-lisp

     ;; yes or no
     (defalias 'yes-or-no-p 'y-or-n-p)

     #+END_SRC

**** Variables

     Save =file-name-handle-alist=, it will be used to restore
     its original value. It might need to open a file while the startup,
     it's better for our usability to start with t he original value after
     the initialization.

     #+BEGIN_SRC emacs-lisp

     (defvar saved-file-name-handler-alist
       file-name-handler-alist
       "Save `file-name-handler-alist' variable.")

     #+END_SRC

**** Keymaps

     Basically, new prefix maps are created for the most commonly used
     commands and their functions are mapped within their respective maps.

     After that, the prefix maps will be placed in the Ctl-x-map
     prefix, resulting in the standardization of commands (functions)
     access sequences - keybinds or chords.

     For the sake of sanity a lot of keybinds have been cleaned up,
     it's preferable (IMO) to have a small set of keybinds,
     consisting only of the most used ones, providing a more stable
     and less error prone overall usability.

     #+BEGIN_SRC emacs-lisp

     (defvar vlm-window-map
       (make-sparse-keymap)
       "Window commands keymap.")

     (defvar vlm-rb-map
       (make-sparse-keymap)
       "Register/Bookmarks commands keymap.")

     (defvar vlm-tags-map
       (make-sparse-keymap)
       "Tags (navigation) commands keymap.")

     (defvar vlm-tabs-map
       (make-sparse-keymap)
       "Tabs (navigation) commands keymap.")

     (defvar vlm-pm-map
       (make-sparse-keymap)
       "Project management commands keymap.")

     (defvar vlm-sc-map
       (make-sparse-keymap)
       "Syntax check commands keymap.")

     (defvar vlm-completion-map
       (make-sparse-keymap)
       "Completion commands keymap.")

     (defvar vlm-docs-map
       (make-sparse-keymap)
       "Docs commands keymap.")

     (defvar vlm-files-map
       (make-sparse-keymap)
       "Files commands keymap.")

     (defvar vlm-debug-map
       (make-sparse-keymap)
       "Debug commands keymap.")

     (defvar vlm-filter-map
       (make-sparse-keymap)
       "Filter commands keymap.")

     (defvar vlm-utils-map
       (make-sparse-keymap)
       "Utils commands keymap.")

     (defvar vlm-media-map
       (make-sparse-keymap)
       "Media commands keymap.")

     #+END_SRC

     #+RESULTS:
     : vlm-media-map

     Define maps as prefix commands, this prepares
     =keymaps= for use as a prefix key's binding.

     #+BEGIN_SRC emacs-lisp

     (dolist (prefix-map '(vlm-tags-map
                           vlm-tabs-map
                           vlm-rb-map
                           vlm-pm-map
                           vlm-sc-map
                           vlm-docs-map
                           vlm-files-map
                           vlm-filter-map
                           vlm-utils-map
                           vlm-window-map
                           vlm-media-map
                           vlm-completion-map))
       (define-prefix-command prefix-map))

     #+END_SRC

**** Binds

     All the new created =keymaps= are bound
     to =ctl-x-map= prefix.

     #+BEGIN_SRC emacs-lisp

     ;; vlm prefix maps
     (define-key ctl-x-map (kbd "f") 'vlm-files-map) ;; files
     ;; (define-key ctl-x-map (kbd "") 'vlm-filter-map)
     (define-key ctl-x-map (kbd "p") 'vlm-pm-map) ; project
     (define-key ctl-x-map (kbd "t") 'vlm-tags-map) ; tags
     (define-key ctl-x-map (kbd "C-o") 'vlm-tabs-map) ; tabs
     (define-key ctl-x-map (kbd "c") 'vlm-utils-map) ; commands
     (define-key ctl-x-map (kbd "e") 'vlm-sc-map) ; errors
     (define-key ctl-x-map (kbd "l") 'vlm-docs-map) ; library
     (define-key ctl-x-map (kbd "v") 'vlm-media-map) ; video/media
     (define-key ctl-x-map (kbd "<tab>") 'vlm-completion-map) ; tab (complete)

     #+END_SRC

     #+RESULTS:
     : vlm-completion-map

**** Theme

    #+BEGIN_SRC emacs-lisp
      ;; add vlm-theme-dir to theme load path
      (add-to-list 'custom-theme-load-path
                   (concat user-emacs-directory "themes"))
      (load-theme 'moebius-glass t)
     #+END_SRC

*** Defer

    Used to seep up the emacs startup time.

**** Clean

     #+BEGIN_SRC emacs-lisp

     ;; clean file-name-handler-alist
     (setq file-name-handler-alist nil)

     #+END_SRC

**** Hooks

    Queue a hook to restore the file-name-handler-alist to that it was before this initialization.

     #+BEGIN_SRC emacs-lisp

     ;; restore file-name-handler-alist
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq file-name-handler-alist
                       saved-file-name-handler-alist)))

     #+END_SRC

*** Startup

    This file parses the command line and gets Emacs running.

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; non-nil inhibits the startup screen
     (customize-set-variable 'inhibit-startup-message nil)

     ;; non-nil inhibits the initial startup echo area message
     (customize-set-variable 'inhibit-startup-echo-area-message nil)

     ;; major mode command symbol to use for the initial *scratch* buffer
     (customize-set-variable 'initial-major-mode 'emacs-lisp-mode)

     ;; the full name of the user logged in
     (customize-set-variable 'user-full-name (getenv "USER"))

     ;; email address of the current user
     (customize-set-variable 'user-mail-address "menezes.n.eric@gmail.com")

     #+END_SRC

*** Warnings

    This package implements the entry points `warn', `lwarn'
    and `display-warning'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'warnings nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; minimum severity level for displaying the warning buffer
      (customize-set-variable 'warning-minimum-level :error)

      ;; minimum severity level for logging a warning.
      (customize-set-variable 'warning-minimum-log-level :warning)

      #+END_SRC

** Vanilla

   Major Structures of Emacs: Files, Buffer, Windows, Frames, Input,
   International, Commands, Completions, Editing...

   Basically the 'C' (core) system and fundamental ELISP libraries.

*** X

    #+BEGIN_SRC emacs-lisp

    ;; non-nil means normalize frame before maximizing (not working)
    ;; (customize-set-variable 'x-frame-normalize-before-maximize nil)

    ;; if non-nil with a Gtk+ built Emacs, the Gtk+ tooltip is used
    (customize-set-variable 'x-gtk-use-system-tooltips t)

    ;; if this equals the symbol ’hide’, Emacs temporarily hides the child
    ;; frame during resizing (testing)
    (customize-set-variable 'x-gtk-resize-child-frames 'resize-mode)

    #+END_SRC

*** iso-transl

    Used to avoid undefined with accented characters, like tilde(~).

    #+BEGIN_SRC elisp
    (require 'iso-transl)
    #+END_SRC

*** Files

    A computer file is a computer resource for recording data
    discretely in a computer storage device.

**** Files

     Defines most of Emacs's file- and directory-handling functions,
     including basic file visiting, backup generation, link handling,
     ITS-id version control, load- and write-hook handling, and the like.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'files nil t)

      #+END_SRC

***** Functions

      #+BEGIN_SRC emacs-lisp

      (defun vlm-kill-emacs-query-function ()
        "Asks for Emacs kill confirmation."
        (interactive)
        (y-or-n-p "[kill-emacs]: Are you sure? "))

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; control use of version numbers for backup files.
      (customize-set-variable 'version-control t)

      ;; non-nil means always use copying to create backup files
      (customize-set-variable 'backup-by-copying t)

      ;; number of newest versions to keep when a new numbered backup is made
      (customize-set-variable 'kept-new-versions 6)

      ;; number of oldest versions to keep when a new numbered backup is made
      (customize-set-variable 'kept-old-versions 2)

      ;; if t, delete excess backup versions silently
      (customize-set-variable 'delete-old-versions t)

      ;; non-nil means make a backup of a file the first time it is saved
      (customize-set-variable 'make-backup-files nil)

      ;; non-nil says by default do auto-saving of every file-visiting buffer
      (customize-set-variable 'auto-save-default nil)

      ;; most *NIX tools work best when files are terminated
      ;; with a newline
      (customize-set-variable 'require-final-newline t)

      ;; non-nil if Emacs should confirm killing processes on exit
      (customize-set-variable 'confirm-kill-processes nil)

      ;; functions to call with no arguments to query about killing Emacs
      (customize-set-variable 'kill-emacs-query-functions
                              `(server-kill-emacs-query-function vlm-kill-emacs-query-function))

      ;; alist of filename patterns and backup directory names
      (customize-set-variable 'backup-directory-alist '(("" . "~/.emacs.d/backup")))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; create cache directory, if necessary
      ;; (add-hook 'window-setup-hook
      ;;           (lambda ()
      ;;             (mkdir (concat user-emacs-directory "cache") t)))

      #+END_SRC

**** Ffap

     Command find-file-at-point.
     With a prefix, it behaves exactly like find-file.
     Without a prefix, it first tries to guess a default file or URL
     from the text around the point.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ffap nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-files-map
      (define-key vlm-files-map (kbd "f") 'find-file-at-point)
      (define-key vlm-files-map (kbd "d") 'dired-at-point)
      (define-key vlm-files-map (kbd "C-d") 'ffap-list-directory)

      #+END_SRC

**** Locate

     Locate.el provides an interface to a program which searches a
     database of file names. By default, this program is the GNU locate
     command, but it could also be the BSD-style find command, or even a
     user specified command.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'locate nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-files-map (kbd "l") 'locate)

      #+END_SRC

**** Recentf

     The recent files list is automatically saved across Emacs
     sessions. You can customize the number of recent files displayed,
     the location of the menu and others options
     (see the source code for details).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'recentf nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file to save the recent list into.
      (customize-set-variable
       'recentf-save-file (concat user-emacs-directory "cache/recentf"))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-files-map
      (define-key vlm-files-map (kbd "r") 'recentf-open-files)
      (define-key vlm-files-map (kbd "t") 'recentf-find-file)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'recentf-mode 1)))

      #+END_SRC

**** Diff

     This package helps you explore differences between files, using the
     UNIX command diff(1). The commands are `diff' and `diff-backup'.
     You can specify options with `diff-switches'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'diff nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; a string or list of strings specifying switches to be passed to diff
      (customize-set-variable 'diff-switches "-u")

      #+END_SRC

**** Ediff

     This package provides a convenient way of simultaneous browsing through
     the differences between a pair (or a triple) of files or buffers.
     The files being compared, file-A, file-B, and file-C (if applicable) are
     shown in separate windows (side by side, one above the another, or in
     separate frames), and the differences are highlighted as you step
     through them.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ediff nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; options to pass to `ediff-custom-diff-program'.
      (customize-set-variable 'ediff-custom-diff-options "-U3")

      ;; the function used to split the main window between buffer-A and buffer-B
      (customize-set-variable 'ediff-split-window-function 'split-window-horizontally)

      ;; function called to set up windows
      (customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)
      (add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)
      (add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display)

      #+END_SRC

**** Jka-compr

     This package implements low-level support for reading, writing,
     and loading compressed files.  It hooks into the low-level file
     I/O functions (including write-region and insert-file-contents) so
     that they automatically compress or uncompress a file if the file
     appears to need it (based on the extension of the file name).
     Packages like Rmail, VM, GNUS, and Info should be able to work
     with compressed files without modification.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'jka-compr nil t)
      ;; (require 'jka-compr-hook nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; list of compression related suffixes to try when loading files
      (customize-set-variable 'jka-compr-load-suffixes '(".gz" ".el.gz"))

      ;; if you set this outside Custom while Auto Compression mode is
      ;; already enabled (as it is by default), you have to call
      ;; `jka-compr-update' after setting it to properly update other
      ;; variables. Setting this through Custom does that automatically.

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; turn on the mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'auto-compression-mode 1)))

      #+END_SRC

**** Dired

      This is a major mode for file management operations.

      The most common operations performed on files or groups of files
      include creating, opening (e.g. viewing, playing, editing or
      printing), renaming, moving or copying, deleting and searching
      for files, as well as modifying file attributes, properties and
      file permissions.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'dired nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; enable dired-find-alternate-file
      (add-hook 'window-setup-hook
                (lambda ()
                  (put 'dired-find-alternate-file 'disabled nil)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; dired-mode-map
      (eval-after-load 'dired
        (lambda ()
          (when (boundp 'dired-mode-map)
            (define-key dired-mode-map (kbd "c") 'dired-do-copy)
            (define-key dired-mode-map (kbd "e") 'dired-create-empty-file)
            (define-key dired-mode-map (kbd "C") 'dired-do-compress-to)
            ;; redundancy
            (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
            (define-key dired-mode-map (kbd "C-j") 'dired-find-alternate-file))))

      ;; ctl-x-map (redundancy)
      (define-key ctl-x-map (kbd "d") 'dired)
      (define-key ctl-x-map (kbd "C-d") 'dired)

      #+END_SRC

*** Frames

    When Emacs is started on a graphical display, e.g., on the X Window
    System, it occupies a graphical system-level display region.  In this
    manual, we call this a “frame”, reserving the word “window” for the part
    of the frame used for displaying a buffer.

    - A frame initially contains one window, but it can be subdivided
      into multiple windows

    Configure/customize frame related options:

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'frame nil t)

     #+END_SRC

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; with some window managers you may have to set this to non-nil
     ;; in order to set the size of a frame in pixels, to maximize
     ;; frames or to make them fullscreen.
     (customize-set-variable 'frame-resize-pixelwise t)

     ;; normalize before maximize
     (customize-set-variable 'x-frame-normalize-before-maximize t)

     ;; set frame title format
     (customize-set-variable 'frame-title-format
                             '((:eval (if (buffer-file-name)
                                          (abbreviate-file-name (buffer-file-name))
                                        "%b"))))

     ;; alist of parameters for the initial minibuffer frame.
     ;; (customize-set-variable 'minibuffer-frame-alist
     ;;                         '((top . 1)
     ;;                           (left . 1)
     ;;                           (width . 80)
     ;;                           (height . 2)))

     ;; alist of parameters for the initial X window frame
     (add-to-list 'initial-frame-alist '(fullscreen . fullheight))

     ;; alist of default values for frame creation
     (add-to-list 'default-frame-alist '(internal-border-width . 2))

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; set transparency after a frame is created
     ;; (add-hook 'after-make-frame-functions
     ;;           (lambda (frame)
     ;;             (set-frame-transparency .8)))

     #+END_SRC

**** Binds

     #+BEGIN_SRC emacs-lisp

     ;; global map
     ;;(global-set-key (kbd "C-x C-o") 'other-frame)

     #+END_SRC

**** Macros

     #+BEGIN_SRC emacs-lisp

     (defmacro safe-set-frame-font (font)
       "Set the default font to FONT."
       `(cond ((find-font (font-spec :name ,font))
               (set-frame-font ,font nil t))))

     ;; (safe-set-frame-font "Iosevka:pixelsize=20:width=regular:weight=regular")

     #+END_SRC

**** Enable

     #+BEGIN_SRC emacs-lisp

     ;; window divider
     (add-hook 'window-setup-hook
               (lambda ()
                 (funcall 'window-divider-mode 1)))

     ;; blink cursor
     (add-hook 'window-setup-hook
               (lambda ()
                 (funcall 'blink-cursor-mode 1)))

     #+END_SRC

*** Windows
**** Window

     Emacs windows system.

     Characteristics:

     - Each Emacs window displays one Emacs buffer at any time.
     - A single buffer may appear in more than one window.
     - Emacs can split a frame into two or many windows.
     - Multiple frames always imply multiple windows, because each
       frame has its own set of windows.
     - Each window belongs to one and only one frame.

     Configure/customize windows standard/basic options,
     the description of each one can be found on the
     commentaries.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; number of lines of margin at the top and bottom of a window
      (customize-set-variable 'scroll-margin 0)

      ;; scroll up to this many lines, to bring point back on screen
      (customize-set-variable 'scroll-conservatively 1)

      ;; t means point keeps its screen position
      (customize-set-variable 'scroll-preserve-screen-position t)

      ;; non-nil means mouse commands use dialog boxes to ask questions
      (customize-set-variable 'use-dialog-box nil)

      ;; width in columns of left marginal area for display of a buffer
      (customize-set-variable 'left-margin-width 1)

      ;; width in columns of right marginal area for display of a buffer.
      (customize-set-variable 'right-margin-width 1)

      ;; if t, resize window combinations proportionally
      (customize-set-variable 'window-combination-resize t)

      ;; if non-nil ‘display-buffer’ will try to even window sizes
      (customize-set-variable 'even-window-sizes t)

      ;; if non-nil, left and right side windows occupy full frame height
      (customize-set-variable 'window-sides-vertical nil)

      ;; non-nil value means always make a separate frame
      (customize-set-variable 'pop-up-frames nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds (global)
      (global-set-key (kbd "s-l") 'shrink-window-horizontally)
      (global-set-key (kbd "s-h") 'enlarge-window-horizontally)
      (global-set-key (kbd "s-j") 'shrink-window)
      (global-set-key (kbd "s-k") 'enlarge-window)

      ;; next and previous buffer (on current window)
      (define-key ctl-x-map (kbd "C-,") 'previous-buffer)
      (define-key ctl-x-map (kbd "C-.") 'next-buffer)

      ;; binds (vlm-window prefix map)
      (define-key vlm-window-map (kbd "+") 'maximize-window)
      (define-key vlm-window-map (kbd "-") 'minimize-window)
      (define-key vlm-window-map (kbd "w") 'balance-windows)
      (define-key vlm-window-map (kbd "o") 'other-window-prefix)

      ;; binds ctl-x-map (C-x w)
      (define-key ctl-x-map (kbd "w") 'vlm-window-map)

      ;; switch to buffer
      (define-key ctl-x-map (kbd "C-b") 'switch-to-buffer)

      ;; kill buffer and window
      (define-key ctl-x-map (kbd "C-k") 'kill-buffer-and-window)

      ;; other window (redundancy)
      ;;(define-key ctl-x-map (kbd "C-o") 'other-window)

      ;; switch to the last buffer in the buffer list
      (define-key ctl-x-map (kbd "C-u") 'unbury-buffer)

      #+END_SRC

***** Display

      In its most simplistic form, a frame accommodates always
      one single window that can be used for displaying a buffer.
      As a consequence, it is always the latest call of display-buffer
      that will have succeeded in placing its buffer there.

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** Windmove

     This package defines a set of routines, windmove-{left,up,right,
     down}, for selection of windows in a frame geometrically.
     For example, `windmove-right' selects the window immediately to the
     right of the currently-selected one.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'windmove nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; window move default keybinds (shift-up/down etc..)
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'windmove-default-keybindings)))

      #+END_SRC

**** Page

     This package provides the page-oriented movement and
     selection commands documented in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'page nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable narrow functions
      (add-hook 'window-setup-hook
                (lambda ()
                  (put 'narrow-to-page 'disabled nil)
                  (put 'narrow-to-region 'disabled nil)))

      #+END_SRC

*** Buffers
**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; non-nil means do not display continuation lines
     (customize-set-variable 'truncate-lines nil)

     ;; column beyond which automatic line-wrapping should happen
     (customize-set-variable 'fill-column 80)

     ;; sentences should be separated by a single space
     (customize-set-variable 'sentence-end-double-space nil)

     ;; list of functions called with no args to query before killing a buffer
     (customize-set-variable 'kill-buffer-query-functions nil)

     ;; non-nil means load prefers the newest version of a file
     (customize-set-variable 'load-prefer-newer t)

     ;; enable erase-buffer
     (add-hook 'window-setup-hook
               (lambda ()
                 (put 'erase-buffer 'disabled nil)))

     #+END_SRC

**** Display
***** Hl-line

      Provides a local minor mode (toggled by M-x hl-line-mode) and
      a global minor mode (toggled by M-x global-hl-line-mode) to
      highlight, on a suitable terminal, the line on which point is.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'hl-line nil t)

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       ;; enable highlight line
       (add-hook 'window-setup-hook
                 (lambda ()
                   (funcall 'global-hl-line-mode 1)))

       #+END_SRC

***** Linum

      Display line numbers format to be display in the current buffer.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'linum nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; format used to display line numbers
       (customize-set-variable 'linum-format " %2d ")

       #+END_SRC

****** Hook

       #+BEGIN_SRC emacs-lisp

       ;; (add-hook 'prog-mode-hook 'linum-mode)

       #+END_SRC

***** Display-linum

      Display line numbers in the buffer.
      Provides a minor mode interface for `display-line-numbers'.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'display-line-numbers nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; if non-nil, do not shrink line number width
       (customize-set-variable 'display-line-numbers-grow-only t)

       ;; if non-nil, count number of lines to use for line number width
       (customize-set-variable 'display-line-numbers-width-start t)

       ;; if an integer N > 0, highlight line number of every Nth line
       (customize-set-variable 'display-line-numbers-major-tick 0)

       ;; if an integer N > 0, highlight line number of every Nth line
       (customize-set-variable 'display-line-numbers-minor-tick 0)

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'prog-mode-hook 'display-line-numbers-mode)

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       ;; (safe-funcall 'global-display-line-numbers-mode 1)

       #+END_SRC

***** Display-column-indicator

      This library provides the display of the column indicator.

****** Require
****** Customize
****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'prog-mode-hook
                 (lambda ()
                   (display-fill-column-indicator-mode 1)))

       #+END_SRC

****** Binds
***** Cursor

      On a text terminal, the cursor's appearance is controlled by the
      terminal, largely out of the control of Emacs.
      Some terminals offer two different cursors: a visible static
      cursor, and a very visible blinking cursor.
      By default, Emacs uses the very visible cursor, and switches
      to it when you start or resume Emacs. If the variable
      visible-cursor is nil when Emacs starts or resumes, it uses
      the normal cursor.

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; non-nil means to make the cursor very visible
       (customize-set-variable 'visible-cursor t)

       #+END_SRC

*** Conding-System

    Emacs supports a wide variety of international character sets, including
    European and Vietnamese variants of the Latin alphabet, as well as
    Arabic scripts, Brahmic scripts (for languages such as Bengali, Hindi,
    and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han (for Chinese and
    Japanese), Hangul (for Korean), Hebrew and IPA.  Emacs also supports
    various encodings of these characters that are used by other
    internationalized software, such as word processors and mailers.

    Configure/set coding-system (UTF8), everywhere!

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; coding system to use with system messages
     (customize-set-variable 'locale-coding-system 'utf-8)

     ;; coding system to be used for encoding the buffer contents on saving
     (customize-set-variable 'buffer-file-coding-system 'utf-8)

     ;; add coding-system at the front of the priority list for automatic detection
     (prefer-coding-system 'utf-8)

     ;; set coding system (UFT8)
     (set-language-environment "UTF-8")
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)

     #+END_SRC

*** Commands
**** History

     Commands history.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'chistory nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; maximum length of history lists before truncation takes place
      (customize-set-variable 'history-length 1024)

      ;;list history of commands that used the minibuffer
      (customize-set-variable 'list-command-history-max history-length)

      #+END_SRC

**** Minibuffer

     The minibuffer is where Emacs commands read complicated arguments,
     such as file names, buffer names, Emacs command names, or Lisp
     expressions. We call it the `minibuffer' because it's a special-purpose
     buffer with a small amount of screen space. You can use the usual Emacs
     editing commands in the minibuffer to edit the argument text.

     When the minibuffer is in use, it appears in the echo area, with a
     cursor. The minibuffer starts with a `prompt', usually ending with
     a colon.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'minibuffer nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means to allow minibuffer commands while in the minibuffer
      (customize-set-variable 'enable-recursive-minibuffers nil)

      ;; if non-nil, `read-answer' accepts single-character answers
      (customize-set-variable 'read-answer-short t)

      ;; non-nil means completion ignores case when reading a buffer name
      (customize-set-variable 'read-buffer-completion-ignore-case t)

      ;; non-nil means when reading a file name completion ignores case
      (customize-set-variable 'read-file-name-completion-ignore-case nil)

      ;; number of completion candidates below which cycling is used
      (customize-set-variable 'completion-cycle-threshold nil)

      ;; treat the SPC or - inserted by `minibuffer-complete-word as delimiters
      (customize-set-variable 'completion-pcm-complete-word-inserts-delimiters t)

      ;; a string of characters treated as word delimiters for completion
      (customize-set-variable 'completion-pcm-word-delimiters "-_./:| ")

      ;; if non-nil, print helpful inline messages during completion
      (customize-set-variable 'completion-show-inline-help nil)

      ;; non-nil means automatically provide help for invalid completion input
      (customize-set-variable 'completion-auto-help t)

      ;; non-nil means don’t consider case significant in completion
      (customize-set-variable 'completion-ignore-case t)

      ;; non-nil means flex completion rejects spaces in search pattern
      (customize-set-variable 'completion-flex-nospace t)

      ;; list of completion styles to use: see `completion-styles-alist variable
      (customize-set-variable 'completion-styles '(basic
                                                   initials
                                                   partial-completion
                                                   flex))

      ;; list of category-specific user overrides for completion styles
      (customize-set-variable 'completion-category-overrides
                              '((file (flex basic initials))
                                (buffer (flex basic initials))))
      ;; (info-menu (styles basic))))

      ;; define the appearance and sorting of completions
      (customize-set-variable 'completions-format 'vertical)

      ;; how to resize mini-windows (the minibuffer and the echo area)
      (customize-set-variable 'resize-mini-windows nil)

      ;; format string used to output "default" values
      (customize-set-variable 'minibuffer-default-prompt-format " (default: %s)")

      ;; if non-nil, shorten "(default ...)" to "[...]" in minibuffer prompts
      (customize-set-variable 'minibuffer-eldef-shorten-default t)

      ;; non-nil means entering the minibuffer raises the minibuffer's frame
      (customize-set-variable 'minibuffer-auto-raise t)

      ;; non-nil means to delete duplicates in history
      (customize-set-variable 'history-delete-duplicates t)

      ;; any other value means the minibuffer will move onto another frame, but
      ;; only when the user starts using a minibuffer there
      (customize-set-variable 'minibuffer-follows-selected-frame 1)

      ;; special hook to find the completion table for the entity at point (default)
      (customize-set-variable 'completion-at-point-functions
                              `(elisp-completion-at-point
                                tags-completion-at-point-function t))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; defer garbage collection
      ;; set `gc-cons-threshold' to most-positive-fixnum
      ;; the largest lisp integer value representation
      (add-hook 'minibuffer-setup-hook
                (lambda ()
                  (setq gc-cons-threshold most-positive-fixnum)))

      ;; reset threshold to inital value (16 megabytes)
      (add-hook 'minibuffer-exit-hook
                (lambda () (run-at-time 1 nil
                                        (lambda ()
                                          (setq gc-cons-threshold 16777216)))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

        ;; minibuffer-local-map
        (define-key minibuffer-local-map (kbd "M-`") 'minibuffer-completion-help)
        (define-key minibuffer-local-map (kbd "M-w") 'minibuffer-complete-word)
        (define-key minibuffer-local-map (kbd "<tab>") 'minibuffer-complete)

        ;; global
        (global-set-key (kbd "<C-delete>") 'quit-minibuffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; if `file-name-shadow-mode' is active, any part of the
      ;; minibuffer text that would be ignored because of this is given the
      ;; properties in `file-name-shadow-properties', which may
      ;; be used to make the ignored text invisible, dim, etc.
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'file-name-shadow-mode 0)))

      ;; when active, any recursive use of the minibuffer will show
      ;; the recursion depth in the minibuffer prompt, this is only
      ;; useful if `enable-recursive-minibuffers' is non-nil
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'minibuffer-depth-indicate-mode 0)))

      ;; when active, minibuffer prompts that show a default value only show
      ;; the default when it's applicable
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'minibuffer-electric-default-mode 1)))

      #+END_SRC

**** Savehist

     Many editors (e.g. Vim) have the feature of saving minibuffer
     history to an external file after exit.  This package provides the
     same feature in Emacs.  When set up, it saves recorded minibuffer
     histories to a file (`~/.emacs-history' by default).  Additional
     variables may be specified by customizing
     `savehist-additional-variables'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'savehist nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file name where minibuffer history is saved to and loaded from.
      (customize-set-variable
       'savehist-file (concat user-emacs-directory "cache/history"))

      ;; if non-nil, save all recorded minibuffer histories.
      (customize-set-variable 'savehist-save-minibuffer-history t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable savehist mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'savehist-mode 1)))

      #+END_SRC

**** Completion

     After you type a few characters, pressing the `complete'
     key inserts the rest of the word you are likely to type.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'completion nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; how far to search in the buffer when looking for completions,
      ;; if nil, search the whole buffer
      (customize-set-variable 'completion-search-distance 12000)

      ;; if non-nil, the next completion prompt does a cdabbrev search
      (customize-set-variable 'completion-cdabbrev-prompt-flag nil)

      ;; non-nil means show help message in *Completions* buffer
      (customize-set-variable 'completion-show-help nil)

      ;; minimum output speed at which to display next potential completion
      (customize-set-variable 'completion-prompt-speed-threshold 2400)

      ;; non-nil means separator characters mark previous word as used
      (customize-set-variable 'completion-on-separator-character t)

      ;; the filename to save completions to.
      (customize-set-variable
       'save-completions-file-name
       (expand-file-name "cache/completitions" user-emacs-directory))

      ;; non-nil means save most-used completions when exiting emacs
      (customize-set-variable 'save-completions-flag t)

      ;; discard a completion if unused for this many hours.
      ;; (1 day = 24, 1 week = 168)
      ;; if this is 0, non-permanent completions
      ;; will not be saved unless these are used
      (customize-set-variable 'save-completions-retention-time 168)

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      (add-to-list 'display-buffer-alist
                   '("\\*completions\\*"
                     (display-buffer-below-selected display-buffer-at-bottom)
                     (window-height . fit-window-to-buffer)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; completion-list-mode-map
      (define-key completion-list-mode-map (kbd "q") 'delete-completion-window)
      (define-key completion-list-mode-map (kbd "d") 'delete-completion-line)
      (define-key completion-list-mode-map (kbd "w") 'kill-ring-save)
      (define-key completion-list-mode-map (kbd "RET") 'choose-completion)
      (define-key completion-list-mode-map (kbd "TAB") 'next-completion)
      (define-key completion-list-mode-map (kbd "DEL") 'previous-completion)
      (define-key completion-list-mode-map (kbd "C-j") 'choose-completion)
      (define-key completion-list-mode-map (kbd "C-g") 'quit-minibuffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable dynamic completion mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'dynamic-completion-mode 1)))

      #+END_SRC

**** Icomplete

     This package implements a more fine-grained minibuffer
     completion feedback scheme. Prospective completions are concisely
     indicated within the minibuffer itself, with each successive
     keystroke.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'icomplete nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; pending-completions number over which to apply `icomplete-compute-delay
      (customize-set-variable 'icomplete-delay-completions-threshold 512)

      ;; maximum number of initial chars to apply `icomplete-compute-delay
      (customize-set-variable 'icomplete-max-delay-chars 2)

      ;; completions-computation stall, used only with large-number completions
      (customize-set-variable 'icomplete-compute-delay 0)

      ;; when non-nil, show completions when first prompting for input
      (customize-set-variable 'icomplete-show-matches-on-no-input t)

      ;; if non-nil, automatically delete superfluous parts of file names
      (customize-set-variable 'icomplete-tidy-shadowed-file-names t)

      ;; when non-nil, hide common prefix from completion candidates
      (customize-set-variable 'icomplete-hide-common-prefix nil)

      ;; maximum number of lines to use in the minibuffer
      (customize-set-variable 'icomplete-prospects-height 1)

      ;; string used by Icomplete to separate alternatives in the minibuffer
      ;; (customize-set-variable 'icomplete-separator (propertize " • " 'face 'shadow))
      ;; (customize-set-variable 'icomplete-separator (propertize " · " 'face 'shadow))
      (customize-set-variable 'icomplete-separator (propertize " | " 'face 'shadow))

      ;; specialized completion tables with which `icomplete' should operate,
      ;; if this is t, `icomplete operates on all tables
      (customize-set-variable 'icomplete-with-completion-tables t)

      ;; if non-nil, also use icomplete when completing in non-mini buffers
      (customize-set-variable 'icomplete-in-buffer nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'icomplete
        (lambda ()
          (when (boundp 'icomplete-minibuffer-map)
            ;; unbind
            (define-key icomplete-minibuffer-map (kbd "SPC") nil)
            ;; bind
            (define-key icomplete-minibuffer-map (kbd "C-j") 'icomplete-force-complete-and-exit)
            (define-key icomplete-minibuffer-map (kbd "RET") 'exit-minibuffer)
            (define-key icomplete-minibuffer-map (kbd "<tab>") 'minibuffer-complete)
            (define-key icomplete-minibuffer-map (kbd "C-n") 'icomplete-forward-completions)
            (define-key icomplete-minibuffer-map (kbd "C-p") 'icomplete-backward-completions)
            (define-key icomplete-minibuffer-map (kbd "DEL") 'icomplete-fido-backward-updir)
            (define-key icomplete-minibuffer-map (kbd "M-p") 'previous-line-or-history-element)
            (define-key icomplete-minibuffer-map (kbd "M-n") 'next-line-or-history-element)
            (define-key icomplete-minibuffer-map (kbd "M-i") 'minibuffer-insert-completion-in-buffer)
            (define-key icomplete-minibuffer-map (kbd "M-y") 'minibuffer-insert-completion-at-point)
            (define-key icomplete-minibuffer-map (kbd "M-k") 'minibuffer-kill-current-completion)
            (define-key icomplete-minibuffer-map (kbd "M-h") 'minibuffer-describe-current-completion))))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable globally
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'icomplete-mode 1)))

      #+END_SRC

*** Screen

    On a graphical display, such as on GNU/Linux using the X Window System,
    Emacs occupies a graphical window.  On a text terminal, Emacs occupies
    the entire terminal screen. We will use the term `frame' to mean a
    graphical window or terminal screen occupied by Emacs. Emacs behaves
    very similarly on both kinds of frames. It normally starts out with
    just one frame, but you can create additional frames if you wish.

**** Tab-bar

     Provides `tab-bar-mode' to control display of the tab bar and
     bindings for the global tab bar.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tab-bar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; defines where to show the close tab button
      (customize-set-variable 'tab-bar-close-button-show nil)

      ;; if non-nil, show the "New tab" button in the tab bar
      (customize-set-variable 'tab-bar-new-button-show nil)

      ;; string that delimits tabs
      (customize-set-variable 'tab-bar-separator " ")

      ;; if the value is ‘1’, then hide the tab bar when it has only one tab-bar-show
      ;; if t, enable `tab-bar-mode' automatically on using the commands that
      ;; create new window configurations
      (customize-set-variable 'tab-bar-show nil)

      ;; if 'rightmost', create as the last tab
      (customize-set-variable 'tab-bar-new-tab-to "rightmost")

      ;; if 'recent', select the most recently visited tab
      (customize-set-variable 'tab-bar-close-tab-select "recent")

      ;; list of modifier keys for selecting a tab by its index digit (testing)
      ;; (customize-set-variable 'tab-bar-select-tab-modifiers '("super"))

      ;; show absolute numbers on tabs in the tab bar before the tab name
      ;; (customize-set-variable 'tab-bar-tab-hints nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-tabs-map (kbd "t") 'tab-switcher)
      (define-key vlm-tabs-map (kbd "n") 'tab-bar-new-tab)
      (define-key vlm-tabs-map (kbd "r") 'tab-bar-rename-tab)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'tab-bar-mode 1)))

      #+END_SRC

**** Tool-bar

     Provides `tool-bar-mode' to control display of the tool-bar and
     bindings for the global tool bar with convenience functions
     `tool-bar-add-item' and `tool-bar-add-item-from-menu'.

     Tool bar in all graphical frames disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tool-bar nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'tool-bar-mode 0)))

      #+END_SRC

**** Tooltip

     When this global minor mode is enabled, Emacs displays help
     text (e.g. for buttons and menu items that you put the mouse on)
     in a pop-up window.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tooltip nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; seconds to wait before displaying a tooltip the first time.
      (customize-set-variable 'tooltip-delay 0.2)

      ;; use the echo area instead of tooltip frames for help and GUD tooltips
      (customize-set-variable 'tooltip-use-echo-area t)

      #+END_SRC

**** Menu-bar

     Each Emacs frame normally has a "menu bar" at the top which you can use
     to perform common operations. There's no need to list them here, as you
     can more easily see them yourself.

     Disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'menu-bar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp :tangle yes

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-utils-map (kbd "o") 'menu-bar-open)

      #+END_SRC

***** Disable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'menu-bar-mode 0)))

      #+END_SRC

**** Scroll-bar

     Specify whether to have vertical scroll bars, and on which side.
     Disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'scroll-bar nil t)

      #+END_SRC

***** Disable

      #+BEGIN_SRC emacs-lisp

      ;; disable scroll bar
      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'scroll-bar-mode 0)))

      #+END_SRC

**** Fringe

     Contains code to initialize the built-in fringe bitmaps
     as well as helpful functions for customizing the appearance of the
     fringe.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'fringe nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; 0 -> ("no-fringes" . 0), remove ugly icons to represet new lines
      ;; ascii is more than enough to represent this information
      ;; default appearance of fringes on all frame
      (customize-set-variable 'fringe-mode 0)

      #+END_SRC

**** Mode-line

     Each Emacs window (aside from minibuffer windows) typically has a mode
     line at the bottom, which displays status information about the buffer
     displayed in the window. The mode line contains information about the
     buffer, such as its name, associated file, depth of recursive editing,
     and major and minor modes.

***** Customize

      #+BEGIN_SRC emacs-lisp

    ;; remove underline
    (customize-set-variable 'x-underline-at-descent-line t)

    ;; mode-line format
    (customize-set-variable 'mode-line-format
                '(" "
                  "λ"
                  " "
                  "»"
                  " "
                  (:eval (format-time-string " %H:%M"))
                  " "
                  "¦"
                  ;; "
                  ;; mode-line-front-space
                  " "
                  mode-line-modified
                  mode-line-remote
                  ;; (:eval (when (display-graphic-p)
                  ;;          (format "  %d/%d"
                  ;;                  exwm-workspace-current-index
                  ;;                  (exwm-workspace--count))))
                  " "
                  "¦"
                  " "
                  "%l'%c"
                  " "
                  "·"
                  " "
                  (:eval (propertized-buffer-identification "(%b)"))
                  " "
                  "·"
                  " "
                  "("
                  (:eval (upcase (replace-regexp-in-string "-mode" "" (symbol-name major-mode))))
                  ")"
                  (:eval (when vc-mode (concat " » " (projectile-project-name) " »")))
                  (vc-mode vc-mode)))

      #+END_SRC

**** Wallpaper

     Set default wallpaper (uses vex-util package!).

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; set wallpaper
      ;; (add-hook 'window-setup-hook
      ;;           (lambda()
      ;;             (set-wallpaper
      ;;              "~/media/images/wallpapers/studio-ghibli/ghibli-7.jpg"
      ;;              "-g -0-0")))

      #+END_SRC

*** Bell

    Force visible-bell to nill, avoiding anoiyng sounds. And sets
    ring-bell-function to a lambda that inverts the face of modeline.

    #+BEGIN_SRC emacs-lisp
    (setq visible-bell nil
          ring-bell-function '(lambda ()
                                (invert-face 'mode-line)
                                (run-with-timer 0.01 nil #'invert-face 'mode-line)))
    #+END_SRC

*** Editing
**** Basic Edition commands
***** Binds

    Functions from LEX that is needed to reimplement.

      #+BEGIN_SRC

        ;; edit
        ;; (global-set-key (kbd "M-y") 'browse-kill-ring)         ;;
        ;; (global-set-key (kbd "M-i") 'indent-region-or-buffer)      ;;
        ;; (global-set-key (kbd "M-j") 'duplicate-line-or-region)     ;;
        ;; (global-set-key (kbd "M-n") 'transpose-lines-up)       ;;
        ;; (global-set-key (kbd "M-p") 'transpose-lines-down)         ;;
        ;; (global-set-key (kbd "M-l") 'downcase-word)            ;;
        ;; (global-set-key (kbd "C-w") 'kill-region-or-backward-word) ;;
        ;;                                ;;

      #+END_SRC

**** Mark
***** Binds

      #+BEGIN_SRC
        ;; shell command history
        (define-key ctl-x-map (kbd "C-x") 'shell-command)
        ;;(define-key ctl-x-map (kbd "C-c") 'eval-command-history)

        ;; mark
        (define-key vlm-utils-map (kbd "h") 'mark-whole-buffer)
        (define-key vlm-utils-map (kbd "s") 'mark-sexp)
        (define-key vlm-utils-map (kbd "p") 'mark-paragraph)
        (define-key vlm-utils-map (kbd "w") 'mark-word)

      #+END_SRC

**** Indent

     Commands for making and changing indentation in text.
     These are described in the Emacs manual.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; indentation can insert tabs if this is non-nil
      (customize-set-variable 'indent-tabs-mode nil)

      ;; default number of columns for margin-changing functions to indent
      (customize-set-variable 'standard-indent 4)

      ;; distance between tab stops (for display of tab characters), in columns.
      (customize-set-variable 'tab-width 4)

      ;; if 'complete, TAB first tries to indent the current line
      ;; if t, hitting TAB always just indents the current line
      ;; If nil, hitting TAB indents the current line if point is at the left margin
      ;; or in the line's indentation
      (customize-set-variable 'tab-always-indent 'complete)

      #+END_SRC

**** Kmacro

     The kmacro package provides the user interface to emacs' basic
     keyboard macro functionality.  With kmacro, two function keys are
     dedicated to keyboard macros, by default F3 and F4.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'kmacro nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key ctl-x-map (kbd "m") 'kmacro-keymap)

      #+END_SRC

**** Elec-pair

     Electric pairing: automatically matches parenthesis pairs,
     should be enabled regardless the current major mode.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'elec-pair nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; alist of pairs that should be used regardless of major mode.
      (customize-set-variable 'electric-pair-pairs
                              '((?\{ . ?\})
                                (?\( . ?\))
                                (?\[ . ?\])
                                (?\" . ?\")))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'electric-pair-mode 1)))

      #+END_SRC

**** Newcomment

     This library contains functions and variables for commenting and
     uncommenting source code.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'newcomment nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; global-map
      (global-set-key (kbd "M-c") 'comment-line)

      #+END_SRC

**** Face-remap

     This package defines some simple operations that can be used for
     maintaining the `face-remapping-alist' in a cooperative way.
     This is especially important for the `default' face.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'face-remap nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; ctl-x-map (C-x)
      (define-key ctl-x-map (kbd "=") 'text-scale-adjust)

      #+END_SRC

**** Delsel

     This package makes the active region be pending delete, meaning that
     text inserted while the region is active will replace the region contents.
     This is a popular behavior of personal computers text editors.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'delsel nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; delete selection-mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'delete-selection-mode 1)))

      #+END_SRC

**** Replace

     This package supplies the string and regular-expression replace functions
     documented in the Emacs user's manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'replace nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;;(global-set-key (kbd "M-s M-o") 'list-occurrences-at-point)

      #+END_SRC

**** Rectangle

     Rectangle: Operations on rectangles!

     This package provides the operations on rectangles that are documented
     in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'rect nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

        ;; global map
        (global-set-key (kbd "C-x r %") 'replace-rectangle)

      #+END_SRC

**** Whitespace

     This package is a minor mode to visualize and clean
     blanks (TAB, (HARD) SPACE and NEWLINE).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'whitespace nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; specify which kind of blank is visualized
      ;; empty was removed
      (customize-set-variable
       'whitespace-style
       '(face
         tabs spaces trailing lines
         space-before-tab newline indentation
         space-after-tab space-mark tab-mark
         newline-mark missing-newline-at-eof))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; clean whitespace and newlines before buffer save
      (add-hook 'before-save-hook #'whitespace-cleanup)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds
      (define-key ctl-x-map (kbd ".") 'whitespace-mode)

      #+END_SRC

*** Help
**** Help

     GNU Emacs's built-in help system, the one invoked by
     M-x help-for-help.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help nil t)

      #+END_SRC

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; always select the help window
     (customize-set-variable 'help-window-select nil)

     ;; maximum height of a window displaying a temporary buffer.
     (customize-set-variable 'temp-buffer-max-height
                             (lambda (buffer)
                               (if (and (display-graphic-p) (eq (selected-window) (frame-root-window)))
                                   (/ (x-display-pixel-height) (frame-char-height) 4)
                                 (/ (frame-height) 4))))

     ;; the minimum total height, in lines, of any window
     (customize-set-variable 'window-min-height 4)

     #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'temp-buffer-resize-mode 1)))

      #+END_SRC

**** Help-fns

     This file contains those help commands which are complicated, and
     which may not be used in every session. For example
     `describe-function' will probably be heavily used when doing elisp
     programming, but not if just editing C files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help-fns nil t)

      #+END_SRC

**** Help-mode

     Help-mode, which is the mode used by *Help* buffers, and
     associated support machinery, such as adding hyperlinks, etc...

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help-mode nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'help-mode
        (lambda ()
          (when (boundp 'help-mode-map)
            (define-key help-mode-map (kbd "C-j") 'push-button))))

      ;; help prefix map (C-h) (redundancy)
      (define-key help-map (kbd "C-f") 'describe-function)
      (define-key help-map (kbd "C-v") 'describe-variable)
      (define-key help-map (kbd "C-k") 'describe-key)
      (define-key help-map (kbd "C-m") 'describe-mode)
      (define-key help-map (kbd "C-o") 'describe-symbol)
      (define-key help-map (kbd "C-e") 'view-echo-area-messages)

      #+END_SRC

*** Docs
**** Info

     The GNU Project distributes most of its manuals in the Info format,
     which you read using an Info reader.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'info nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means don’t record intermediate Info nodes to the history
      (customize-set-variable 'Info-history-skip-intermediate-nodes nil)

      ;; list of additional directories to search for (not working)
      ;; (customize-set-variable 'Info-additional-directory-list
      ;;                         `(,(expand-file-name "info/" user-emacs-directory)))

      ;; list of directories to search for Info documentation files (works!)
      (customize-set-variable 'Info-directory-list
                              `("/usr/local/share/emacs/info/"
                                "/usr/local/share/info/"
                                ,(expand-file-name "info/" user-emacs-directory)))

      ;; 0 -> means do not display breadcrumbs
      (customize-set-variable 'info-breadcrumbs-depth 0)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; help-map
      (define-key help-map (kbd "TAB") 'info-display-manual)

      ;; info-mode-map
      (eval-after-load 'info
        (lambda ()
          (when (boundp 'Info-mode-map)
            (define-key Info-mode-map (kbd "C-j") 'Info-follow-nearest-node))))

      #+END_SRC

**** Eldoc

     As you type a function's symbol name as part of a sexp,
     it will print the argument list for that function.
     Behavior is not identical; for example, you need not actually
     type the function name, you need only move point around in a sexp that
     calls it.  Also, if point is over a documented variable, it will print
     the one-line documentation for that variable instead, to remind you of
     that variable's meaning.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eldoc nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; number of seconds of idle time to wait before printing.
      (customize-set-variable 'eldoc-idle-delay 0.1)

      ;; if value is any non-nil value other than t, symbol name may be truncated
      ;; if it will enable the function arglist or documentation string to fit on a
      ;; single line without resizing window
      (customize-set-variable 'eldoc-echo-area-use-multiline-p t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable eldoc globally
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'eldoc-mode 1)))

      #+END_SRC

*** Utils
**** Bookmark

     Bookmarks are somewhat like registers in that they record positions
     you can jump to. Unlike registers, they have long names, and they
     persist automatically from one Emacs session to the next.
     The prototypical use of bookmarks is to record where you were
     reading in various files.

     The bookmark list is sorted lexically by default, but you can turn
     this off by setting bookmark-sort-flag to nil. If it is nil, then
     the list will be presented in the order it is recorded
     (chronologically), which is actually fairly useful as well.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'bookmark nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; file in which to save bookmarks by default.
      (customize-set-variable
       'bookmark-default-file (concat user-emacs-directory "cache/bookmarks"))

      #+END_SRC

** Libraries

   Elisp libraries built-in or installed under ~.emacs/lisp~ directory. Usually more basic and
   generic libraries that helps with the Emacs Lisp system as a whole.

*** Loaddefs

    The local ~lisp-loaddefs.el~ was generated by
    =update-directory-autoloads=, using the ~/emacs.d/lisp~
    directory as its base.

    Update/Generate =autoload= definitions for Lisp files in the directories.
    In an interactive call, you must give one argument, the name of a
    single directory. In a call from Lisp, you can supply multiple
    directories as separate arguments.

    #+BEGIN_SRC emacs-lisp

    ;; generated by `update-directory-autolods'
    (require 'lisp-loaddefs nil t)

    #+END_SRC

*** Comp

    In addition to the byte-compilation, described in *note the previous
    chapter: Byte Compilation, Emacs can also optionally compile Lisp
    function definitions into a true compiled code, known as 'native code'.
    This feature uses the =libgccjit= library, which is part of the GCC
    distribution, and requires that Emacs be built with support for using
    that library. It also requires to have GCC and Binutils (the assembler
    and linker) available on your system for you to be able to
    native-compile Lisp code.

    Unlike byte-compiled code, natively-compiled Lisp code is executed
    directly by the machine's hardware, and therefore runs at full speed
    that the host CPU can provide. The resulting speedup generally depends
    on what the Lisp code does, but is usually 2.5 to 5 times faster than
    the corresponding byte-compiled code.

    Since native code is generally incompatible between different
    systems, the natively-compiled code is *not* transportable from one
    machine to another, it can only be used on the same machine where it was
    produced or on very similar ones (having the same CPU and run-time
    libraries). The transportability of natively-compiled code is the same
    as that of shared libraries (=.so= files).

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'comp nil t)

     #+END_SRC

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; non-nil means unconditionally (re-)compile all files
     (customize-set-variable 'native-comp-always-compile t)

     ;; default number of subprocesses used for async native compilation
     ;; value of zero means to use half the number of the CPU's execution units
     (customize-set-variable 'native-comp-async-jobs-number 0)

     ;; emit a warning if a byte-code file being loaded has no corresponding source
     (customize-set-variable 'native-comp-warning-on-missing-source t)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     #+END_SRC

*** Fundamental
**** Simple

     A grab-bag of basic Emacs commands not specifically related to
     some major mode or to file-handling.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'simple nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; don't omit information when lists nest too deep
      (customize-set-variable 'eval-expression-print-level 4)

      ;; your preference for a mail composition package
      (customize-set-variable 'mail-user-agent 'message-user-agent)

      ;; what to do when the output buffer is used by another shell command
      (customize-set-variable 'async-shell-command-buffer 'rename-buffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; column number display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'column-number-mode 1)))

      ;; buffer size display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'size-indication-mode 1)))

      #+END_SRC

*** Network
**** Tramp

     TRAMP is for transparently accessing remote files from within Emacs.
     TRAMP enables an easy, convenient, and consistent interface to remote
     files as if they are local files.  TRAMP’s transparency extends to
     editing, version control, and dired.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tramp nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; set tramp default method for file transfer
      ;; (customize-set-variable 'tramp-default-method "ssh")

      ;; if non-nil, chunksize for sending input to local process.
      ;; (customize-set-variable 'tramp-chunksize 64)

      ;; a value of t would require an immediate reread during filename completion,
      ;; nil means to use always cached values for the directory contents.
      (customize-set-variable 'tramp-completion-reread-directory-timeout nil)

      ;; set tramp verbose level
      (customize-set-variable 'tramp-verbose 4)

      ;; file which keeps connection history for tramp connections.
      (customize-set-variable
       'tramp-persistency-file-name
       (concat (expand-file-name user-emacs-directory) "cache/tramp"))

      ;; when invoking a shell, override the HISTFILE with this value
      (customize-set-variable
       'tramp-histfile-override "~/.tramp_history")

      ;; connection timeout in seconds
      (customize-set-variable 'tramp-connection-timeout 10)

      #+END_SRC

*** Security
**** Nsm

     Network Security Manager.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'nsm nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if a potential problem with the security of the network
      ;; connection is found, the user is asked to give input
      ;; into how the connection should be handled
      ;; `high': This warns about additional things that many
      ;; people would not find useful.
      ;; `paranoid': On this level, the user is queried for
      ;; most new connections
      (customize-set-variable 'network-security-level 'high)

      ;; the file the security manager settings will be stored in.
      (customize-set-variable 'nsm-settings-file
                              (expand-file-name "nsm/netword-security.data" user-emacs-directory))

      #+END_SRC

**** Epg-config
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eps-config nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the gpg executable
      (customize-set-variable 'epg-gpg-program "gpg")

      #+END_SRC

**** Gnutls

     This package provides language bindings for the GnuTLS library
     using the corresponding core functions in gnutls.c

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gnutls nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, this should be a TLS priority string
      (customize-set-variable 'gnutls-algorithm-priority nil)

      ;; if non-nil, this should be t or a list of checks
      ;; per hostname regex
      (customize-set-variable 'gnutls-verify-error nil)

      #+END_SRC

**** Epa

     EasyPG is an all-in-one GnuPG interface for Emacs.
     It has two aspects: convenient tools which allow to use GnuPG
     from Emacs (EasyPG Assistant), and a fully
     functional interface library to GnuPG (EasyPG Library).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'epa nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, cache passphrase for symmetric encryption
      (customize-set-variable
       'epa-file-cache-passphrase-for-symmetric-encryption t)

      ;; if t, always asks user to select recipients
      (customize-set-variable 'epa-file-select-keys t)

      ;; in epa commands, a particularly useful mode is ‘loopback’, which
      ;; redirects all Pinentry queries to the caller, so Emacs can query
      ;; passphrase through the minibuffer, instead of external Pinentry
      ;; program
      (customize-set-variable 'epa-pinentry-mode 'loopback)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; (add-hook 'window-setup-hook
      ;;           (lambda ()
      ;;             (funcall 'epa-file-enable)))

      #+END_SRC

*** Process
**** Async

     Adds the ability to call asynchronous functions and process with
     ease. See the documentation for `async-start' and `async-start-process'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'async nil t)

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      ;; to run command without displaying the output in a window
      (add-to-list 'display-buffer-alist
                   '("\\*Async Shell Command\\*"
                     (display-buffer-no-window)
                     (allow-no-window . t)))

      #+END_SRC

*** Parses
**** Mm-bodies

     This library handles MIME body (encode/decode).

     MIME is short for "Multipurpose Internet Mail Extensions".
     This standard is documented in a number of RFCs;
     mainly RFC2045 (Format of Internet Message Bodies),
     RFC2046 (Media Types), RFC2047 (Message Header Extensions for
     Non-ASCII Text),  RFC2048 (Registration Procedures),
     RFC2049 (Conformance Criteria and Examples).

     It is highly recommended that anyone who intends writing
     MIME-compliant software read at least RFC2045 and RFC2047.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mm-bodies nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'mm-bodies
        (lambda ()
          (when (boundp 'mm-body-charset-encoding-alist)
            (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)))))

      #+END_SRC

**** Shr

     This package takes a HTML parse tree (as provided by
     libxml-parse-html-region) and renders it in the current buffer.  It
     does not do CSS, JavaScript or anything advanced: It's geared
     towards rendering typical short snippets of HTML, like what you'd
     find in HTML email and the like.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'shr nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; frame width to use for rendering
      (customize-set-variable 'shr-width 80)

      ;; if non-nil, use proportional fonts for text
      (customize-set-variable 'shr-use-fonts nil)

      ;; if non-nil, respect color specifications in the HTML
      (customize-set-variable 'shr-use-colors t)

      ;; if non-nil, inhibit loading images
      (customize-set-variable 'shr-inhibit-images t)

      ;; images that have URLs matching this regexp will be blocked (regexp)
      (customize-set-variable 'shr-blocked-images nil)

      #+END_SRC

*** Misc
**** Custom

     Emacs has many settings which you can change. Most settings are
     customizable variables, which are also called user options.
     There is a huge number of customizable variables,
     controlling numerous aspects of Emacs behavior.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'custom nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file used for storing customization information.
      ;; The default is nil, which means to use your init file
      ;; as specified by ‘user-init-file’.  If the value is not nil,
      ;; it should be an absolute file name.
      (customize-set-variable
       'custom-file (concat (expand-file-name user-emacs-directory) "custom.el"))

      #+END_SRC

*** Lazy-Load

     Automatic generate `autoload' definitions.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lazy-load nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means starts to monitor the directories
      (customize-set-variable 'lazy-load-enable-filenotify-flag t)

      ;; non-nil means show debug messages
      (customize-set-variable 'lazy-load-debug-messages-flag t)

      ;; non-nil means run `lazy-load-update-autoloads' when emacs is idle
      (customize-set-variable 'lazy-load-enable-run-idle-flag nil)

      ;; idle timer value
      (customize-set-variable 'lazy-load-idle-seconds 30)

      ;; interval in seconds, used to trigger the timer callback
      (customize-set-variable 'lazy-load-timer-interval 15)

      ;; target files and directories
      (customize-set-variable 'lazy-load-files-alist
                              (list
                               ;; lisp directory
                               (cons "lisp-loaddefs.el" (expand-file-name "lisp/" user-emacs-directory))
                               ;; site-lisp directory
                               (cons "site-lisp-loaddefs.el"
                                     (expand-file-name "site-lisp/" user-emacs-directory))))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

        ;; (add-hook 'window-setup-hook
        ;;           (lambda ()
        ;;             (funcall 'turn-on-lazy-load-mode)))

      #+END_SRC

** Extensions

   Elisp libraries installe under ~.emacs/site-lisp~ directory. Refers to libraries
   often specialized to one topic, e.g. a programming language, an interface for a
   extenal program.

*** Loaddefs

    The local ~lisp-loaddefs.el~ was generated by
    =update-directory-autoloads=, using the ~/emacs.d/site-lisp~
    directory, where the packages were installed.

    Update/Generate =autoload= definitions for Lisp files in the directories.
    In an interactive call, you must give one argument, the name of a
    single directory. In a call from Lisp, you can supply multiple
    directories as separate arguments.

    #+BEGIN_SRC emacs-lisp

      ;; generated by `update-directory-autoloads'
      (require 'lisp-loaddefs nil t)
      (require 'site-lisp-loaddefs nil t)

    #+END_SRC

*** Windows (X)

     A window manager is system software that controls the placement
     and appearance of windows within a windowing system in a graphical
     user interface. Most window managers are designed to help provide
     a desktop environment.

     Finally an Emacs window means X11/Xorg WINDOW as well :D!
     Thanks to EXWM! (great library!).

***** Exwm

      EXWM (Emacs X Window Manager) is a full-featured tiling X window manager
      for Emacs built on top of XELB.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'exwm nil t)

       #+END_SRC

****** Defines

       #+BEGIN_SRC emacs-lisp

       (defvar eos-xrandr-right-screen "eDP1"
         "Defines the screen located at right side")

       (defvar eos-xrandr-left-screen "HDMI1"
         "Defines the screen located at right side")

       (defvar eos-xrandr-command
         (format "xrandr --output %s --right-of %s"
                 eos-xrandr-right-screen
                 eos-xrandr-left-screen)
         "Defines the screen located at right side")


       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; monitors: check the xrandr(1) output and use the same name/order
       ;; TODO: create a func that retrieves these values from xrandr

       (customize-set-variable
        'exwm-randr-workspace-monitor-plist '(0 "eDP1"
                                                1 "HDMI1"
                                                2 "HDMI1"))

       (customize-set-variable 'exwm-workspace-number
                               (if (boundp 'exwm-randr-workspace-monitor-plist)
                                   (/ (safe-length exwm-randr-workspace-monitor-plist) 2)
                                 1))

       ;; set exwm workspaces number
       (customize-set-variable 'exwm-workspace-number 2)

       ;; show workspaces in all buffers
       (customize-set-variable 'exwm-workspace-show-all-buffers nil)

       ;; non-nil to allow switching to buffers on other workspaces
       (customize-set-variable 'exwm-layout-show-all-buffers nil)

       ;; non-nil to force managing all X windows in tiling layout.
       (customize-set-variable 'exwm-manage-force-tiling t)

       ;; exwn global keybindings
       (customize-set-variable 'exwm-input-global-keys
                               `(([?\s-r] . exwm-reset)
                                 ([?\s-q] . exwm-input-toggle-keyboard)
                                 ([?\s-d] . exwm-floating-toggle-floating)
                                 ([?\s-m] . exwm-layout-toggle-fullscreen)

                                 ;; create and switch to workspaces
                                 ,@(mapcar (lambda (i)
                                             `(,(kbd (format "s-%d" i)) .
                                               (lambda ()
                                                 (interactive)
                                                 (exwm-workspace-switch-create ,i))))
                                           (number-sequence 0 2))))

       ;; The following example demonstrates how to use simulation keys to mimic
       ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
       ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
       ;; and DEST is what EXWM actually sends to application.  Note that both SRC
       ;; and DEST should be key sequences (vector or string).
       (customize-set-variable 'exwm-input-simulation-keys
                               '(
                                 ;; movement
                                 ([?\C-p] . [up])
                                 ([?\C-b] . [left])
                                 ([?\C-f] . [right])
                                 ([?\C-n] . [down])
                                 ([?\M-b] . [C-left])
                                 ([?\M-f] . [C-right])
                                 ([?\C-e] . [end])
                                 ([?\C-v] . [next])
                                 ([?\C-a] . [home])
                                 ([?\M-v] . [prior])
                                 ([?\C-d] . [delete])
                                 ([?\C-k] . [S-end delete])

                                 ;; browser temporary
                                 ([?\C-o] . [C-prior]) ; change tab mapping
                                 ([?\C-k] . [C-w]) ; close tab mapping
                                 ([?\C-j] . [return]) ; close tab mapping

                                 ;; cut/paste.
                                 ([?\C-w] . [?\C-x])
                                 ([?\M-w] . [?\C-c])
                                 ([?\C-y] . [?\C-v])

                                 ;; Escape (cancel)
                                 ([?\C-g] . [escape])

                                 ;; search
                                 ([?\C-s] . [?\C-f])))

       #+END_SRC

****** Binds

       #+BEGIN_SRC emacs-lisp

       ;; this little bit will make sure that XF86 keys work in exwm buffers as well
       (if (boundp 'exwm-input-prefix-keys)
           (progn
             (dolist (key '(XF86AudioLowerVolume
                            XF86AudioRaiseVolume
                            XF86PowerOff
                            XF86AudioMute
                            XF86AudioPlay
                            XF86AudioStop
                            XF86AudioPrev
                            XF86AudioNext
                            XF86ScreenSaver
                            XF68Back
                            XF86Forward
                            Scroll_Lock
                            print))
               (cl-pushnew key exwm-input-prefix-keys))))

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
       ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
       ;; are run when a new X window class name or title is available.  Here's
       ;; some advice on this topic:
       ;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
       ;; + For applications with multiple windows (e.g. GIMP), the class names of
       ;; all windows are probably the same.  Using window titles for them makes
       ;; more sense.

       ;; update the buffer name by X11 window title
       (add-hook 'exwm-update-title-hook
                 (lambda ()
                   (when (and (fboundp 'exwm-workspace-rename-buffer)
                              (boundp 'exwm-class-name)
                              (boundp 'exwm-title))
                     (exwm-workspace-rename-buffer
                      (truncate-string-to-width
                       (concat exwm-class-name "|" exwm-title) 32)))))

       (add-hook 'exwm-randr-screen-change-hook
                 (lambda ()
                   (start-process-shell-command
                    "randr" nil eos-xrandr-command)))
       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       ;; enable exwm if graphic display is non-nil
       (when (and (display-graphic-p)
                  (require 'exwm nil t)
                  (require 'exwm-randr nil t))
         (progn
           (exwm-enable)
           (exwm-randr-enable)))

       #+END_SRC

***** Exwm-edit

      A module used to edit fields in a application using a emacs buffer.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'exwm-edit nil t)

       #+END_SRC

****** Bind

       #+BEGIN_SRC emacs-lisp
       (when (display-graphic-p)
           (exwm-input-set-key (kbd "C-c '") #'exwm-edit--compose)
           (exwm-input-set-key (kbd "C-c C-'") #'exwm-edit--compose))
       #+END_SRC

** EOF

   *...See You Space Cowboy...*

